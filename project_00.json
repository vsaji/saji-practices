The TTD platform provides a unified data injection interface for OpenTelemetry metrics and traces generated by Ambrosia/TRON and SPRING Boot applications. Metrics data is stored in S3 using Cortex, while trace data is captured via Grafana TEMPO and also stored in S3. The retention period is 7 days for traces and 30 days for metrics. TTD offers a telemetry API for non-Ambrosia applications to export trace data without relying on the OpenTelemetry SDK. This API collects trace data from the client's service with minimal latency, exports it to the TTD platform, and converts it to the OpenTelemetry-specific format before publishing it to Grafana Tempo.

The TTD platform provides a centralized data injection interface for OpenTelemetry metrics and traces generated by DDD, FF, and SPRING Boot applications. Metrics data is stored in S3 via Cortex, while trace data is captured via Grafana TEMPO and also stored in S3. The retention periods are 7 days for traces and 30 days for metrics. TTD exposes endpoints for clients to export data from their services to the platform. Additionally, TTD offers a telemetry API for non-Ambrosia applications to export trace data without relying on the OpenTelemetry SDK. This API collects trace data from the client's service with minimal latency, exports it to the TTD platform, converts it to the OpenTelemetry-specific format, and then publishes it to Grafana Tempo.


XYZ platform comprises various components.
Enables the capture of Metrics and Trace data from clients into a centralized store.
Implements data retention policies:

    7 days for Trace data.
    60 days for Metrics.

Utilizes the following for data collection:

    Grafana Tempo for trace data.
    Cortex DB for metrics.

Stores the collected data in an AWS S3 bucket.
Offers a Grafana platform for visualizing the stored data.



Boosting TRON Framework Adoption in ICG to Reduce Time-to-Market

TRON is equipped with features that allow developers to concentrate on building services from a business perspective, leaving technical integrations, monitoring, and other non-functional requirements to TRON. This significantly reduces the time the team spends on solution development, as most common and critical functionalities are already pre-built and pre-configured in TRON.

John has consistently demonstrated exceptional skills in conducting training and overseeing the progress of our team's assignments. His ability to coordinate meetings efficiently ensures that everyone stays on the same page and projects move forward smoothly. John is adept at providing valuable feedback, which is always delivered in a clear and constructive manner. He articulates his ideas well, making it easy for the team to understand expectations and areas for improvement. Moreover, his frequent feedback keeps us well-informed about our performance, enabling us to make necessary adjustments promptly. His dedication to our development and the success of our projects is truly commendable
Pat has been my go-to person for any observability-related queries and tasks. He never fails to answer my queries and is always prompt with his responses. Even when the information is not readily available, Pat makes a concerted effort to find the concerned person or team to direct the question. His consistently welcoming attitude makes me, as a client, very comfortable working with him. Pat's dedication and reliability are truly appreciated and make a significant positive impact on our collaboration
Developed a centralized telemetry platform to consolidate all MO applications into a single system, eliminating redundancy and saving time and effort for teams by removing the need to set up infrastructure or develop frameworks for data export

Ensured timely rollout of client-requested features.
Addressed client queries, responding within a 1-hour SLA.
Conducted sessions to enhance clients' understanding of the various features offered by TRON.
Served as a technology advocate for Ambrosia and other XYZ-driven tools.
Notified clients with release notes, samples, and documentation for changes.


The XYZ framework gained clients' confidence due to its zero production issues and user-friendly model, making it easily adoptable for anyone with experience in the Spring framework
